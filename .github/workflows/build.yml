name: 🚀 编译 (Build)

on:
  workflow_dispatch:
    inputs:
      owner:
        description: 'ImmortalWrt 仓库的拥有者 (Owner of ImmortalWrt repo)'
        type: string
        required: true
        default: 'immortalwrt'
      repo:
        description: 'ImmortalWrt 仓库的名字 (Name of ImmortalWrt repo)'
        type: string
        required: true
        default: 'immortalwrt'
      branch:
        description: 'ImmortalWrt 仓库的分支 (Branch of ImmortalWrt repo)'
        type: string
        required: true
        default: 'openwrt-24.10'
      multithreading:
        description: '开启多线程编译 (Enable multithreading build)'
        type: boolean
        default: true
      ssh:
        description: '使用 ssh 连接到编译环境 (Connect to the build environment using ssh)'
        type: boolean
        default: false

jobs:
  setup:
    name: 环境初始化 (Setup Environment)
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache-dependencies.outputs.cache-hit }}
    steps:
      - name: 缓存 apt 依赖 (Cache apt dependencies)
        id: cache-dependencies
        uses: actions/cache@v3
        with:
          path: /var/cache/apt
          key: ${{ runner.os }}-apt-${{ hashFiles('**/apt-dependencies.txt') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: 下载编译所需的依赖 (Install the software packages required for compilation)
        run: |
          sudo apt update
          sudo apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev

  build:
    needs: setup
    if: ${{ inputs.ssh == false }}
    runs-on: ubuntu-latest
    name: 🚀 编译 (Build)
    steps:
      - name: 克隆当前仓库 (Clone current repo)
        uses: actions/checkout@v4

      - name: 克隆 ImmortalWrt 仓库 (Clone ImmortalWrt repo)
        uses: actions/checkout@v4
        with:
          repository: '${{inputs.owner}}/${{inputs.repo}}'
          ref: ${{inputs.branch}}
          path: ImmortalWrt

      - name: 复制配置文件到 ImmortalWrt 仓库 (Copy config files to ImmortalWrt repo)
        run: cp -f .config feeds.conf.default diy.sh ImmortalWrt/

      - name: 运行 diy.sh (Run diy.sh)
        working-directory: ImmortalWrt
        run: |
          chmod +x diy.sh
          ./diy.sh

      - name: 更新并下载 feeds (Update and download feeds)
        working-directory: ImmortalWrt
        run: ./scripts/feeds update -a && ./scripts/feeds install -a

      - name: 编译前上传配置 (Upload config before build)
        uses: actions/upload-artifact@v4
        with:
          name: config-before-build
          path: |
            ImmortalWrt/feeds.conf.default
            ImmortalWrt/.config

      - name: 编译 ImmortalWrt (Build ImmortalWrt)
        working-directory: ImmortalWrt
        run: |
          if [ "${{ inputs.multithreading }}" = "true" ]; then
            make -j$(nproc) V=s
          else
            make -j1 V=s
          fi

      - name: 上传编译结果到 Artifact (Upload build result to Artifact)
        uses: actions/upload-artifact@v4
        with:
          name: ImmortalWrt-build-result
          path: ImmortalWrt/bin/targets

  build-ssh:
    needs: setup
    if: ${{ inputs.ssh == true }}
    runs-on: ubuntu-latest
    name: 🚀 编译 (Build) - SSH
    steps:
      - name: 克隆当前仓库 (Clone current repo)
        uses: actions/checkout@v4

      - name: 克隆 ImmortalWrt 仓库 (Clone ImmortalWrt repo)
        uses: actions/checkout@v4
        with:
          repository: '${{inputs.owner}}/${{inputs.repo}}'
          ref: ${{inputs.branch}}
          path: ImmortalWrt

      - name: 开启 SSH 服务 (Start SSH service)
        uses: lhotari/action-upterm@v1
        with:
          wait-timeout-minutes: 20

      - name: 编译前上传配置 (Upload config before build)
        uses: actions/upload-artifact@v4
        with:
          name: config-before-build
          path: |
            ImmortalWrt/feeds.conf.default
            ImmortalWrt/.config

      - name: 编译 ImmortalWrt (Build ImmortalWrt)
        working-directory: ImmortalWrt
        run: |
          if [ "${{ inputs.multithreading }}" = "true" ]; then
            make -j$(nproc) V=s
          else
            make -j1 V=s
          fi

      - name: 上传编译结果到 Artifact (Upload build result to Artifact)
        uses: actions/upload-artifact@v4
        with:
          name: ImmortalWrt-build-result
          path: ImmortalWrt/bin/targets
